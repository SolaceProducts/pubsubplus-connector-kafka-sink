# PubSub+ Kafka Sink Connector parameters
# GitHub project https://github.com/SolaceProducts/pubsubplus-connector-kafka-sink
#######################################################################################

# Kafka connect params
# Refer to https://kafka.apache.org/documentation/#connect_configuring
name=solaceSinkConnector
connector.class=com.solace.connector.kafka.connect.sink.SolaceSinkConnector
tasks.max=1
value.converter=org.apache.kafka.connect.converters.ByteArrayConverter
key.converter=org.apache.kafka.connect.storage.StringConverter

# If tasks.max>1 related tasks will share the same group.id.
group.id=solSinkConnectorGroup

# Kafka topics to read from
topics=test

# PubSub+ connection information
sol.host=tcp://192.168.99.113:55555
sol.username=default
sol.password=default
sol.vpn_name=default

# Comma separated list of PubSub+ topics to send to
# If tasks.max>1, use shared subscriptions otherwise each task's subscription will receive same message
# Refer to https://docs.solace.com/PubSub-Basics/Direct-Messages.htm#Shared
sol.topics=sinktest

# PubSub+ queue name to send to, must exist on event broker
#sol.queue=testQ

# PubSub+ Kafka Sink connector record processor
# Refer to https://github.com/SolaceProducts/pubsubplus-connector-kafka-sink
sol.record_processor_class=com.solace.connector.kafka.connect.sink.recordprocessor.SolSimpleRecordProcessor

# If enabled, records that throw record processor errors will be discarded.
#sol.record_processor.error.ignore=false

# When using SolSimpleKeyedRecordProcessor, defines how to convert a Kafka record key
# to part of which part of a PubSub+ message
# Allowable values include: NONE, DESTINATION, CORRELATION_ID, CORRELATION_ID_AS_BYTES
#sol.kafka_message_key=NONE

# Set to true only if using SolDynamicDestinationRecordProcessor and dynamic destinations
#sol.dynamic_destination=false

# Whether to use transacted session and transactions to publish messages to PubSub+ queue
#sol.use_transactions_for_queue=true

# Max outstanding number of transacted messages if using transactions to reliably publish records to a queue. Must be <255
# If outstanding messages limit is reached will auto-commit - will not wait for Kafka Connect "flush" initiated.
#sol.autoflush.size=200

# Starting offset to publish records to PubSub+. If not specified then will only publish new messages.
# If specified it applies to all partitions: set to the desired position or 0 to publish all records from the beginning
#sol.kafka_replay_offset=

# Connector TLS session to PubSub+ message broker properties
# Specify if required when using TLS / Client certificate authentication
# May require setup of keystore and truststore on each host where the connector is deployed
# Refer to https://docs.solace.com/Overviews/TLS-SSL-Message-Encryption-Overview.htm
# and https://docs.solace.com/Overviews/Client-Authentication-Overview.htm#Client-Certificate
#sol.authentication_scheme=
#sol.ssl_connection_downgrade_to=
#sol.ssl_excluded_protocols=
#sol.ssl_cipher_suites=
#sol.ssl_validate_certificate=
#sol.ssl_validate_certicate_date=
#sol.ssl_trust_store=
#sol.ssl_trust_store_password=
#sol.ssl_trust_store_format=
#sol.ssl_trusted_common_name_list=
#sol.ssl_key_store=
#sol.ssl_key_store_password=
#sol.ssl_key_store_format=
#sol.ssl_key_store_normalized_format=
#sol.ssl_private_key_alias=
#sol.ssl_private_key_password=

# Connector Kerberos authentication of PubSub+ message broker properties
# Specify if required when using Kerberos authentication
# Refer to https://docs.solace.com/Overviews/Client-Authentication-Overview.htm#Kerberos
# Example:
#sol.authentication_scheme=AUTHENTICATION_SCHEME_GSS_KRB
#sol.kerberos.login.conf=/opt/kerberos/login.conf
#sol.kerberos.krb5.conf=/opt/kerberos/krb5.conf
#sol.krb_service_name=

# Solace Java properties to tune for creating a channel connection
# Leave at default unless required
# Look up meaning at https://docs.solace.com/API-Developer-Online-Ref-Documentation/java/com/solacesystems/jcsmp/JCSMPChannelProperties.html
#sol.channel_properties.connect_timout_in_millis=
#sol.channel_properties.read_timeout_in_millis=
#sol.channel_properties.connect_retries=
#sol.channel_properties.reconnect_retries=
#sol.channnel_properties.connect_retries_per_host=
#sol.channel_properties.reconnect_retry_wait_in_millis=
#sol.channel_properties.keep_alive_interval_in_millis=
#sol.channel_properties.keep_alive_limit=
#sol.channel_properties.send_buffer=
#sol.channel_properties.receive_buffer=
#sol.channel_properties.tcp_no_delay=
#sol.channel_properties.compression_level=

# Solace Java tuning properties
# Leave at default unless required
# Look up meaning at https://docs.solace.com/API-Developer-Online-Ref-Documentation/java/com/solacesystems/jcsmp/JCSMPProperties.html
#sol.message_ack_mode=
#sol.session_name=
#sol.localhost=
#sol.client_name=
#sol.generate_sender_id=
#sol.generate_rcv_timestamps=
#sol.generate_send_timestamps=
#sol.generate_sequence_numbers=
#sol.calculate_message_expiration=
#sol.reapply_subscriptions=
#sol.pub_multi_thread=
#sol.pub_use_immediate_direct_pub=
#sol.message_callback_on_reactor=
#sol.ignore_duplicate_subscription_error=
#sol.ignore_subscription_not_found_error=
#sol.no_local=
#sol.ack_event_mode=
#sol.sub_ack_window_size=
#sol.pub_ack_window_size=
#sol.sub_ack_time=
#sol.pub_ack_time=
#sol.sub_ack_window_threshold=
#sol.max_resends=
#sol.gd_reconnect_fail_action=
#sol.susbcriber_local_priority=
#sol.susbcriber_network_priority=
#sol.subscriber_dto_override=
#sol.supported_ack_event_mode
#sol.publisher_window_size


